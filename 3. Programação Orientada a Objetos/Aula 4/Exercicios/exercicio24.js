// 24. Crie uma classe chamada "CalendÃ¡rio" com os atributos dia, mÃªs e ano. Implemente um construtor para esta classe. Crie um mÃ©todo para verificar se uma data Ã© vÃ¡lida (levando em consideraÃ§Ã£o os meses com diferentes nÃºmeros de dias). Crie objetos de calendÃ¡rio e teste o mÃ©todo. ðŸ“†ðŸ“…ðŸ“®

class Calendario {
  constructor(dia, mes, ano) {
    this.dia = dia;
    this.mes = mes;
    this.ano = ano;
  }

  dataValida() {
    // Verifica se o ano Ã© bissexto
    const isBissexto = (ano) => (ano % 4 === 0 && ano % 100 !== 0) || ano % 400 === 0;
    // Define o nÃºmero de dias em cada mÃªs
    const diasPorMes = [31, isBissexto(this.ano) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    // Verifica se o mÃªs estÃ¡ dentro do intervalo vÃ¡lido
    if (this.mes >= 1 && this.mes <= 12) {
      // Verifica se o dia estÃ¡ dentro do intervalo vÃ¡lido para o mÃªs
      return this.dia >= 1 && this.dia <= diasPorMes[this.mes - 1];
    }
    return false;
  }
}

const data1 = new Calendario(25, 12, 2022); // Data vÃ¡lida (Natal)
const data2 = new Calendario(31, 4, 2023); // Data invÃ¡lida (abril nÃ£o tem 31 dias)
const data3 = new Calendario(29, 2, 2024); // Data vÃ¡lida (ano bissexto)

console.log("Data 1:");
console.log("Dia:", data1.dia);
console.log("MÃªs:", data1.mes);
console.log("Ano:", data1.ano);
console.log("Ã‰ uma data vÃ¡lida?", data1.dataValida());
console.log("\n");

console.log("Data 2:");
console.log("Dia:", data2.dia);
console.log("MÃªs:", data2.mes);
console.log("Ano:", data2.ano);
console.log("Ã‰ uma data vÃ¡lida?", data2.dataValida());
console.log("\n");

console.log("Data 3:");
console.log("Dia:", data3.dia);
console.log("MÃªs:", data3.mes);
console.log("Ano:", data3.ano);
console.log("Ã‰ uma data vÃ¡lida?", data3.dataValida());
